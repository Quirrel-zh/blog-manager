<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Quirrel-Zh</title>
  
  <subtitle>Quirrel&#39;s blog</subtitle>
  <link href="https://www.f2iclo.cn/atom.xml" rel="self"/>
  
  <link href="https://www.f2iclo.cn/"/>
  <updated>2024-09-22T12:33:00.018Z</updated>
  <id>https://www.f2iclo.cn/</id>
  
  <author>
    <name>小郑</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【webpack】webpack快速入门</title>
    <link href="https://www.f2iclo.cn/2024/09/21/webpack/"/>
    <id>https://www.f2iclo.cn/2024/09/21/webpack/</id>
    <published>2024-09-21T15:55:18.521Z</published>
    <updated>2024-09-22T12:33:00.018Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>本质上，<strong>webpack</strong> 是一个用于现代 JavaScript 应用程序的 <em>静态模块打包工具</em>。当 webpack 处理应用程序时，它会在内部从一个或多个入口点构建一个依赖图，然后将你项目中所需的每一个模块组合成一个或多个 <em>bundles</em>，它们均为静态资源，用于展示你的内容。</p><span id="more"></span><h3 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h3><article class="message is-warning">        <div class="message-header"><p>运行环境</p></div>        <div class="message-body">            <p><code>webpack</code>是基于<code>node.js</code>运行的，请确保node.js最低版本为10.13</p>        </div>    </article><h4 id="构建项目"><a href="#构建项目" class="headerlink" title="构建项目"></a>构建项目</h4><p>首先创建一个文件夹，取任意名字。再进行初始化：</p><div style="margin: 0 0 20px 0; padding: 10px 20px 20px 20px; border-radius: 6px; box-shadow: 0 0.5em 0.75em -0.125em rgba(10, 10, 10, 0.1), 0 0px 0 1px rgba(10, 10, 10, 0.02);">    <div class="tabs my-3 is-medium">        <ul class="mx-0 my-0">            <li class="is-active">          <a href="#1">              <p>npm</p>          </a>      </li><li>          <a href="#2">              <p>yarn</p>          </a>      </li><li>          <a href="#3">              <p>pnpm</p>          </a>      </li>        </ul>    </div>    <div id="1" class="tab-content">          <p><code>npm init -y</code></p>      </div><div id="2" class="tab-content is-hidden">          <p><code>yarn init -y</code></p>      </div><div id="3" class="tab-content is-hidden">          <p><code>pnpm init -y</code></p>      </div></div><br><blockquote><p>后续我们使用npm进行示例</p></blockquote><p>创建完成之后添加<code>webpack</code>依赖。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm add webpack webpack<span class="literal">-cli</span> <span class="literal">--dev</span></span><br></pre></td></tr></table></figure><p>使用<code>--dev</code>表示将webpack相关的依赖添加的开发者环境中。毕竟我们只有开发的时候会使用到webpack</p><hr><h4 id="进行第一次打包"><a href="#进行第一次打包" class="headerlink" title="进行第一次打包"></a>进行第一次打包</h4><p>使用ide打开项目，并创建<code>src</code>目录，在目录下创建<code>index.js</code>文件。随便在里面写点东西</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello World!&#x27;</span>)</span><br></pre></td></tr></table></figure><p>再去项目更目录创建一个<code>index.html</code>文件。将index.js引入此文件中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./src/index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>运行网页，在控制台中发现成功打印出了<code>Hello World!</code></p><p>现在进行第一次进行webpack打包，使用命令行运行打包指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx webpack</span><br></pre></td></tr></table></figure><p>这样就完成了第一次打包，并且在项目目录中新加了一个<code>dist</code>目录，目录下有个<code>main.js</code>文件，其中的语句和我们在<code>index.js</code>中编写的一样。因为此时我们没有用到<code>import</code>导入任何的依赖。</p><p>这时候我们在html文件中的index.js的引用改为main.js，并更新页面。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./dist/main.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此时控制台依然可以成功打印出<code>Hello World!</code></p><hr><h4 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h4><p>此时我们试试在有依赖的情况下，打包后的代码是什么样的。<br>首先在src目录下新建一个<code>data.js</code>文件。里面导出一个函数来返回一串博客列表的数据：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getBlogPosts</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="string">&quot;blog 1&quot;</span>, <span class="string">&quot;blog 2&quot;</span>, <span class="string">&quot;blog 3&quot;</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在<code>index.js</code>中打印语句进行修改</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; getBlogPosts &#125; <span class="keyword">from</span> <span class="string">&quot;./data&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getBlogPosts</span>());</span><br></pre></td></tr></table></figure><p>此时再运行打包指令<code>npx webpack</code>后，查看main.js中的文件，发现此时语句并不和index.js中一致了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line">(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="string">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([<span class="string">&#x27;blog1&#x27;</span>, <span class="string">&#x27;blog2&#x27;</span>, <span class="string">&#x27;blog3&#x27;</span>]);</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>说明webpack在打包时自动判断了代码的逻辑，并且简化了代码语句。并且此时再浏览器控制台中依然可以打印出博客列表的数据。</p><hr><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>webpack最核心的一个部分就是他的配置文件，我们可以修改webpack 的各种配置比如<code>入口(entry)</code>、<code>输出(output)</code>、<code>loader</code>、<code>插件(plugin)</code>、<code>模式(mode)</code>、<code>浏览器兼容(browser compatibility)</code>以及<code>环境(environment)</code>。可以浏览webpack官方中文文档来获取详细信息。</p><blockquote><ul><li><a href="https://webpack.docschina.org/concepts/">概念 | webpack 中文文档 (docschina.org)</a></li></ul></blockquote><hr><h5 id="修改打包后的文件名"><a href="#修改打包后的文件名" class="headerlink" title="修改打包后的文件名"></a>修改打包后的文件名</h5><p>我们先试试将打包后的文件名修改一下：</p><ol><li><p>首先在项目根目录下创建一个webpack配置文件: <code>webpack.config.js</code></p></li><li><p>在文件中对webpack进行配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>) <span class="comment">// 引入path模块</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"><span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span>, <span class="comment">// 设置开发环境</span></span><br><span class="line"><span class="attr">entry</span>: <span class="string">&#x27;./src/index.js&#x27;</span>, <span class="comment">// 入口文件</span></span><br><span class="line"><span class="attr">output</span>: &#123; <span class="comment">// 输出</span></span><br><span class="line"><span class="attr">filename</span>: <span class="string">&#x27;dist.js&#x27;</span>, <span class="comment">// 打包后的文件名</span></span><br><span class="line"><span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>), <span class="comment">// 打包后的目录</span></span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>再运行打包指令</p><p><code>npx webpack</code></p></li></ol><p>此时我们发现在dist目录下新加了一个<code>dist.js</code>文件，这正是我们修改完配置后生成的，并且里面新增了很多代码，这是因为我们现在的环境改成了开发模式。我们再将html文件中引入的js文件修改为<code>dist.js</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./dist/dist.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>刷新页面，控制台依旧打印出博客列表数组，这时候我们就可以将旧的<code>main.js</code>文件删除</p><hr><h5 id="使用loader来导入CSS文件"><a href="#使用loader来导入CSS文件" class="headerlink" title="使用loader来导入CSS文件"></a>使用<code>loader</code>来导入<code>CSS</code>文件</h5><p>首先我们先将<code>index.js</code>中的语句修改一下，改为在页面渲染一个列表，为后续添加样式做铺垫</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; getBlogPosts &#125; <span class="keyword">from</span> <span class="string">&#x27;./data&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> blogs = <span class="title function_">getBlogPosts</span>();</span><br><span class="line"><span class="keyword">const</span> ul = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;ul&#x27;</span>);</span><br><span class="line">blogs.<span class="title function_">forEach</span>(<span class="function"><span class="params">blog</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>);</span><br><span class="line">    li.<span class="property">innerText</span> = blog;</span><br><span class="line">    ul.<span class="title function_">appendChild</span>(li);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(ul);</span><br></pre></td></tr></table></figure><p>先打包后刷新页面，看看是否渲染出了博客列表:</p><p><img src="/../images/webpack/img01.png"></p><p>然后我们在src目录中新建一个<code>style.css</code>文件，随便写点样式</p><figure class="highlight css"><figcaption><span>点击展开 >folded</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">*&#123;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line"><span class="attribute">display</span>: grid;</span><br><span class="line">place-items: center;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line"><span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">li</span> &#123;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">12px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line"><span class="attribute">max-width</span>: <span class="number">500px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们再将css文件导入到<code>index.js</code>中。这样才能充分利用到webpack，如果在html文件中导入，那就和普通的导入没有什么区别了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; getBlogPosts &#125; <span class="keyword">from</span> <span class="string">&#x27;./data&#x27;</span>;</span><br><span class="line"><span class="comment">// 导入css文件的路径</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./style.css&#x27;</span>;</span><br></pre></td></tr></table></figure><p>如果我们现在直接进行webpack打包，会发现控制台报错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ERROR in ./src/style.css 1:0</span><br><span class="line">Module parse failed: Unexpected token (1:0)</span><br><span class="line">You may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders</span><br><span class="line">// 您可能没有合适的loader来加载这种文件类型</span><br><span class="line">&gt; * &#123;</span><br><span class="line">|       margin: 0;</span><br><span class="line">|       padding: 0;</span><br><span class="line"> @ ./src/index.js 2:0-21</span><br><span class="line"></span><br><span class="line">webpack 5.94.0 compiled with 1 error in 53 ms</span><br></pre></td></tr></table></figure><p>那是因为我们还没有使用loader来加载css。想要加载css文件我们需要安装两个loader：<code>style-loader</code>、<code>css-loader</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm add --dev style-loader css-loader</span><br><span class="line">// 注意，我们所有关于webpack相关的依赖都使用--dev来添加，因为只有在开发环境中才能用到</span><br></pre></td></tr></table></figure><p>安装完成中在<code>webpack.config.js</code>中添加loader，在这里需要要配置使用什么样的文件拓展名来使用哪一个loader</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>); <span class="comment">// 引入path模块</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"><span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span>, <span class="comment">// 设置开发环境</span></span><br><span class="line"><span class="attr">entry</span>: <span class="string">&#x27;./src/index.js&#x27;</span>, <span class="comment">// 入口文件</span></span><br><span class="line"><span class="attr">output</span>: &#123;</span><br><span class="line"><span class="attr">filename</span>: <span class="string">&#x27;dist.js&#x27;</span>, <span class="comment">// 打包后的文件名</span></span><br><span class="line"><span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>), <span class="comment">// 打包后的目录</span></span><br><span class="line">&#125;,</span><br><span class="line">    <span class="attr">module</span>: &#123; <span class="comment">// 模块配置</span></span><br><span class="line">        <span class="attr">rules</span>: [ <span class="comment">// 规则</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.css$/i</span>, <span class="comment">// 匹配css文件 使用正则表达式</span></span><br><span class="line">                <span class="attr">use</span>: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>], <span class="comment">// 使用的loader</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后再运行打包指令，刷新页面。发现网页样式已经改变：</p><p><img src="/../images/webpack/img02.png"></p><blockquote><p>在使用SASS或者Less等css预处理文件，也可以通过对应的loader来配置</p></blockquote><hr><h5 id="如何加载图片"><a href="#如何加载图片" class="headerlink" title="如何加载图片"></a>如何加载图片</h5><p>对于图片等静态图片的文件，webpack就不用安装额外的loader，直接可以在rules里添加规则</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">test</span>: <span class="regexp">/\.(png|svg|jpg|jpeg|gif)$/</span>, <span class="comment">// 匹配图片文件</span></span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;asset/resource&#x27;</span>, <span class="comment">// 使用资源模块类型</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在src目录下新建一个静态资源目录<code>assets</code>，在里面创建一个<code>images</code>目录来存放图片。</p><p>在index.js文件中导入我们的图片，并且给他设置个名字</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">AvatarImage</span> <span class="keyword">from</span> <span class="string">&#x27;./assets/images/avatar.png&#x27;</span>;</span><br></pre></td></tr></table></figure><p>再引用图片添加到网页的开头</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> img = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;img&#x27;</span>);</span><br><span class="line">img.<span class="property">src</span> = <span class="title class_">AvatarImage</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">prepend</span>(img);</span><br></pre></td></tr></table></figure><p>运行打包命令，刷新网页。发现图片已经成功的渲染到网页中。并且打包目录<code>dist</code>中图片名称也变成了随机的字符串</p><hr><h5 id="使用插件自动生成html文件"><a href="#使用插件自动生成html文件" class="headerlink" title="使用插件自动生成html文件"></a>使用插件自动生成html文件</h5><p>现在我们的html文件是自己手写的，非常容易出错，我们可以借助一个插件来使webpack打包时自动生成一个html文件。这个插件就是<code>html-webpack-plugin</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm add --dev html-webpack-plugin</span><br></pre></td></tr></table></figure><p>在webpack配置文件中引入插件 然后在配置项里添加一个<code>plugins</code>配置项来使用插件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>); <span class="comment">// 引入html-webpack-plugin插件</span></span><br><span class="line"></span><br><span class="line"><span class="attr">plugins</span>: [<span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>()], <span class="comment">// 使用插件</span></span><br></pre></td></tr></table></figure><p>使用指令打包，这时在打包目录中会生成一个新的html文件。打开发现跟我们之前的页面是一模一样的。</p><p>如果我们想给这个网页名称修改，可以在配置项中传递一个对象参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">plugins</span>: [</span><br><span class="line"><span class="comment">// 使用插件</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line"><span class="attr">title</span>: <span class="string">&#x27;List of Blogs&#x27;</span>, <span class="comment">// 设置html的title</span></span><br><span class="line">&#125;),</span><br><span class="line">],</span><br></pre></td></tr></table></figure><p>打包并刷新页面，发现网页标题变成了我们修改的标题</p><hr><h5 id="使用babel来使js语句更兼容"><a href="#使用babel来使js语句更兼容" class="headerlink" title="使用babel来使js语句更兼容"></a>使用<code>babel</code>来使js语句更兼容</h5><p>有时候我们写js的时候会用到新的特性，但是有些浏览器不支持，那么可以使用webpack对应的loader来使我们的代码转义为更有兼容性的代码。</p><p>比如我们上面写的<code>forEach</code>使用的是箭头函数，我们使用对应的loader之后就会在打包的时候将箭头函数转换成普通函数，来确保适配更多的浏览器。</p><ol><li><p>添加loader依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm add --dev babel-loader @babel/core @babel/preset-env </span><br></pre></td></tr></table></figure></li><li><p>在rules中匹配js文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">test</span>: <span class="regexp">/\.js$/</span>, <span class="comment">// 匹配js文件</span></span><br><span class="line">    <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>, <span class="comment">// 排除node_modules文件夹</span></span><br><span class="line">    <span class="attr">use</span>: &#123;</span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&#x27;babel-loader&#x27;</span>, <span class="comment">// 使用babel-loader</span></span><br><span class="line">        <span class="attr">options</span>: &#123;</span><br><span class="line">            <span class="attr">presets</span>: [<span class="string">&#x27;@babel/preset-env&#x27;</span>], <span class="comment">// 使用babel预设</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p>使用打包命令，然后在dist.js中搜索<code>./src/index.js</code>，可以看到这时的forEach箭头函数被转换成了一个普通函数。说明我们的babel loader生效了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dist.js</span></span><br><span class="line">blogs.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">blog</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>);</span><br><span class="line">  li.<span class="property">innerText</span> = blog;</span><br><span class="line">  ul.<span class="title function_">appendChild</span>(li);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol><hr><h5 id="压缩打包后的js代码"><a href="#压缩打包后的js代码" class="headerlink" title="压缩打包后的js代码"></a>压缩打包后的js代码</h5><p>使用<code>terser-webpack-plugin</code>插件可以让我们的js代码在打包后压缩语句，更加轻量化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm add --dev terser-webpack-plugin</span><br></pre></td></tr></table></figure><p>然后我们在<code>webpack.config.js</code>中导入并使用插件</p><blockquote><p>注意，并不是在<code>pluigins</code>中使用，而是新建一个配置项</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">TerserPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;terser-webpack-plugin&#x27;</span>); <span class="comment">// 引入压缩插件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在module.exports中新建一个配置项</span></span><br><span class="line"><span class="attr">optimization</span>: &#123;</span><br><span class="line">    <span class="comment">// 优化</span></span><br><span class="line"><span class="attr">minimize</span>: <span class="literal">true</span>, <span class="comment">// 使用压缩</span></span><br><span class="line"><span class="attr">minimizer</span>: [<span class="keyword">new</span> <span class="title class_">TerserPlugin</span>()], <span class="comment">// 使用压缩插件</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>运行打包指令，发现dist.js文件中所有的空格都没了，而且变量都被替换成了单个字母进行命名</p><hr><h5 id="开发服务器"><a href="#开发服务器" class="headerlink" title="开发服务器"></a>开发服务器</h5><p>现在我们在每次修改项目的时候都需要手动重新打包，所以webpack提供了一个dev server，也就是开发服务器，在启动之后，如果我们修改了js代码，他就会自动打包并且刷新页面。</p><ol><li><p>安装依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm add --dev webpack-dev-server</span><br></pre></td></tr></table></figure></li><li><p>指定dev server要从哪里去加载代码，要在webpack配置文件中添加一个新的配置项</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">devServer</span>: &#123;</span><br><span class="line"><span class="comment">// 开发服务器</span></span><br><span class="line"><span class="attr">static</span>: &#123;</span><br><span class="line"><span class="comment">// 设置服务器根目录</span></span><br><span class="line"><span class="attr">directory</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p>在package.json中添加一个<code>scripts</code>来启动我们的开发服务器</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack serve --open&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure></li><li><p>在命令行中输入指令启动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run start</span><br></pre></td></tr></table></figure></li></ol><p>这时项目就会在端口8080上启动一个本地服务器，并且在浏览器自动打开你的项目。并且在你改动index.js中的代码时，项目会自动打包并且刷新网页。</p><blockquote><p>相信做到这一步会发现，这个和vue或者react等框架启动的时候不是一样的吗。没错，这都是webpack的能力</p></blockquote><hr><h5 id="文件指纹"><a href="#文件指纹" class="headerlink" title="文件指纹"></a>文件指纹</h5><p>此时每次修改时打包后的dist.js都是相同的文件，因为浏览器有缓存功能，可能会导致在修改后浏览器并不知道你修改了这个文件，直接去取缓存中的dist.js。造成页面没有成功刷新。我们就需要使每次打包后给dist.js文件名中添加一串随机的字符（哈希值的某一段）。我们也可以通过使用webpack来实现</p><ol><li><p>在配置文件中的output配置项中我们的文件名是写死的，这里就要修改我们的文件名为动态的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;[name].[contenthash].js&#x27;</span>,  <span class="comment">// 打包后的文件名 使用哈希值避免缓存</span></span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>),  <span class="comment">// 打包后的目录</span></span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure></li><li><p>停止服务器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// 在控制台中使用 ctrl+c 来停止服务器运行</span><br></pre></td></tr></table></figure></li><li><p>运行打包指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx webpack</span><br></pre></td></tr></table></figure></li></ol><p>这时在dist目录中的就生成了带有哈希值的动态文件名文件，在每次修改时都会打包为不同的文件名，这样就避免了浏览器缓存的问题。</p><hr><h5 id="指定文件目录别名"><a href="#指定文件目录别名" class="headerlink" title="指定文件目录别名"></a>指定文件目录别名</h5><p>我们在引用别的文件时，可能他所在的目录嵌套很深，我们就需要用到很多的<code>.</code>&amp;<code>/</code>，所以webpack可以让你给指定目录添加一个别名，来使我们更方便的导入和引用。</p><ol><li><p>首先我们在src目录下新建一个utils目录，并且在里面新建一个data.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">dataToStr</span>(<span class="params">data</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;data.getFullYear()&#125;</span>-<span class="subst">$&#123;data.getMonth() + <span class="number">1</span>&#125;</span>-<span class="subst">$&#123;data.getDate()&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>然后再src目录下新建一个test目录，在test目录下新建一个data目录，在data目录下新建一个printData.js文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; dataToStr &#125; = <span class="built_in">require</span>(<span class="string">&quot;../../utils/data&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">dataToStr</span>(<span class="keyword">new</span> <span class="title class_">Date</span>()));</span><br></pre></td></tr></table></figure><p>可以看到这时我们导入的路径使用了大量<code>.</code>和<code>/</code>的相对路径</p></li><li><p>在webpack.config.js中新建一个<code>resolve</code>配置项</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">resolve</span>: &#123;</span><br><span class="line"><span class="attr">alias</span>: &#123;</span><br><span class="line"><span class="attr">utils</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;src/utils/&#x27;</span>), <span class="comment">// 设置别名</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p>然后再将printData.js中的路径直接改为我们设置的<code>utils</code>别名</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; dataToStr &#125; = <span class="built_in">require</span>(<span class="string">&quot;utils/data&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>运行打包命令。打包成功，这样就减少了我们引用时使用过多相对路径的问题。</p></li></ol><hr><h5 id="对打包后项目占用可视化"><a href="#对打包后项目占用可视化" class="headerlink" title="对打包后项目占用可视化"></a>对打包后项目占用可视化</h5><p>有时候我们需要在打包后看看哪个文件占用的空间比较大，来进行项目优化，我们可以用到<code>webpack-bundle-analyzer</code>插件来实现</p><ol><li><p>首先安装依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm add --dev webpack-bundle-analyzer</span><br></pre></td></tr></table></figure></li><li><p>在webpack配置文件中，导入插件，并在plugins配置项中使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">BundleAnalyzerPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;webpack-bundle-analyzer&#x27;</span>).<span class="property">BundleAnalyzerPlugin</span> <span class="comment">// 引入打包分析插件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在plugins配置项中添加插件</span></span><br><span class="line"><span class="attr">plugins</span>: [</span><br><span class="line"><span class="comment">// 使用插件</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line"><span class="attr">title</span>: <span class="string">&#x27;List of Blogs&#x27;</span>, <span class="comment">// 设置html的title</span></span><br><span class="line">&#125;),</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">BundleAnalyzerPlugin</span>() <span class="comment">// 使用打包分析插件</span></span><br><span class="line">],</span><br></pre></td></tr></table></figure></li><li><p>然后我们在运行打包命令的时候，会自动打开分析页面，来查看我们当前项目的占用情况</p></li></ol><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这里我们对webpack进行了简单的介绍和示例，了解了webpack的用途和一般配置，如果你想更深入的了解可以访问webpack官方文档来进一步了解，本次示例文件我也同步上传到github项目中，如有需要清随意。</p><blockquote><p><a href="https://www.webpackjs.com/">webpack | webpack中文文档 | webpack中文网 (webpackjs.com)</a></p><p><a href="https://github.com/Quirrel-zh/webpack-study">Quirrel-zh&#x2F;webpack-study (github.com)</a></p><p><a href="https://www.bilibili.com/video/BV11g411y7Sd/?p=1&vd_source=16b896b6375d1890934761237eeff54a">30 分钟掌握 Webpack_哔哩哔哩_bilibili</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h3&gt;&lt;p&gt;本质上，&lt;strong&gt;webpack&lt;/strong&gt; 是一个用于现代 JavaScript 应用程序的 &lt;em&gt;静态模块打包工具&lt;/em&gt;。当 webpack 处理应用程序时，它会在内部从一个或多个入口点构建一个依赖图，然后将你项目中所需的每一个模块组合成一个或多个 &lt;em&gt;bundles&lt;/em&gt;，它们均为静态资源，用于展示你的内容。&lt;/p&gt;</summary>
    
    
    
    <category term="web" scheme="https://www.f2iclo.cn/categories/web/"/>
    
    <category term="webpack" scheme="https://www.f2iclo.cn/categories/web/webpack/"/>
    
    
    <category term="web" scheme="https://www.f2iclo.cn/tags/web/"/>
    
    <category term="webpack" scheme="https://www.f2iclo.cn/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>【CSS】横竖分割线/改变border长度</title>
    <link href="https://www.f2iclo.cn/2024/09/10/CSS-border/"/>
    <id>https://www.f2iclo.cn/2024/09/10/CSS-border/</id>
    <published>2024-09-10T09:02:10.000Z</published>
    <updated>2024-09-21T16:04:30.346Z</updated>
    
    <content type="html"><![CDATA[<h3 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h3><blockquote><p>如何在<code>Home</code>下添加如图所示<strong>短横线</strong></p></blockquote><p><img src="/../images/CSS-border/%E5%AE%9E%E7%8E%B01.png"></p><span id="more"></span><h3 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h3><h4 id="使用border"><a href="#使用border" class="headerlink" title="使用border"></a>使用<code>border</code></h4><p>看到的第一眼可能大部分人都会用<code>border-bottom</code>，但是写上之后会发现，效果有点不太对：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.home</span> <span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../images/CSS-border/%E5%AE%9E%E7%8E%B02.png"></p><p>确实是加了一条横线，但是没法调整长度。换一种思路试试</p><h4 id="使用伪元素"><a href="#使用伪元素" class="headerlink" title="使用伪元素"></a>使用伪元素</h4><p>不要把短横线看成<code>border</code>，而是用<strong>伪元素</strong>来实现。这样不仅是改变长度，大小、颜色、宽度，甚至是可以改变方向</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">selector::pseudo-element &#123;</span><br><span class="line">  property: value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>伪元素就是用于设置元素指定部分的样式，可用于设置元素的首字母、首行的样式，在元素的内容之前或之后插入内容等</p><p><em>了解更多：[<strong>伪元素 - CSS：层叠样式表 | MDN**](**<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Pseudo-elements">伪元素 - CSS：层叠样式表 | MDN (mozilla.org)</a></strong>)</em></p></blockquote><p>实现：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.home</span> <span class="selector-tag">h1</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="comment">/* 伪元素必须有content属性*/</span></span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="comment">/* 绝对定位，别忘了给父级添加relative */</span></span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/* 宽度为10%，高度为2px */</span></span><br><span class="line">    <span class="attribute">height</span>: <span class="number">2px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">10%</span>;</span><br><span class="line">    <span class="comment">/* 横线颜色为粉色 */</span></span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来看看效果：</p><p><img src="/../images/CSS-border/%E5%AE%9E%E7%8E%B03.png"></p><p>非常完美。接下来看试试看将横线变为纵向的分割线：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.home</span> <span class="selector-tag">h1</span><span class="selector-pseudo">::after</span> &#123;  <span class="comment">/* 在h1后方添加元素*/</span></span><br><span class="line">    <span class="comment">/* 伪元素必须有content属性*/</span></span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="comment">/* 绝对定位，别忘了给父级添加relative */</span></span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">right</span>: -<span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">50%</span>);</span><br><span class="line">    <span class="comment">/* 宽度为2px，高度为30px */</span></span><br><span class="line">    <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">2px</span>;</span><br><span class="line">    <span class="comment">/* 横线颜色为灰色 */</span></span><br><span class="line">    <span class="attribute">background-color</span>: lightpink;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="/../images/CSS-border/%E6%95%88%E6%9E%9C.png"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>将上述代码总结一下，在以后也可以用在其他场景。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">selector<span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而且我们不难发现，分割线的<strong>横纵</strong>其实区别就在于<strong>该分割线的宽高值</strong>。将<code>width</code>设为1或2像素，<code>height</code>设为想要的长度，那么这个分割线就是纵向的。反之分割线为横向的。</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;实现效果&quot;&gt;&lt;a href=&quot;#实现效果&quot; class=&quot;headerlink&quot; title=&quot;实现效果&quot;&gt;&lt;/a&gt;实现效果&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;如何在&lt;code&gt;Home&lt;/code&gt;下添加如图所示&lt;strong&gt;短横线&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/../images/CSS-border/%E5%AE%9E%E7%8E%B01.png&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="web" scheme="https://www.f2iclo.cn/categories/web/"/>
    
    <category term="CSS" scheme="https://www.f2iclo.cn/categories/web/CSS/"/>
    
    
    <category term="web" scheme="https://www.f2iclo.cn/tags/web/"/>
    
    <category term="CSS" scheme="https://www.f2iclo.cn/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript 极速梳理</title>
    <link href="https://www.f2iclo.cn/2024/09/04/TypeScript/"/>
    <id>https://www.f2iclo.cn/2024/09/04/TypeScript/</id>
    <published>2024-09-04T08:06:08.000Z</published>
    <updated>2024-09-21T16:03:21.311Z</updated>
    
    <content type="html"><![CDATA[<p><code>JavaScript</code>是非常灵活的一门编程语言，但是这种灵活是把双刃剑，一方面使得JavaScript蓬勃发展，无所不能；另一方面也使它的代码质量参差不齐，维护成本高，运行时错误多。</p><p><code>TypeScript</code>是具有类型的JavaScript，在很大程度上弥补了它的缺点。</p><span id="more"></span><h3 id="类型声明"><a href="#类型声明" class="headerlink" title="类型声明"></a>类型声明</h3><p>给变量声明类型：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">a</span>:<span class="built_in">string</span> <span class="comment">// 变量a只能存储字符串</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">b</span>:<span class="built_in">number</span> <span class="comment">// 变量b只能存储数值</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">c</span>:<span class="built_in">boolean</span> <span class="comment">// 变量c只能存储布尔值</span></span><br><span class="line"></span><br><span class="line">a = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">a = <span class="number">100</span> <span class="comment">// 警告：不能将类型&quot;number&quot;分配给类型&quot;string&quot;</span></span><br><span class="line"></span><br><span class="line">b = <span class="number">666</span></span><br><span class="line">b = <span class="string">&#x27;你好&#x27;</span> <span class="comment">// 警告：不能将类型&quot;string&quot;分配给类型&quot;number&quot;</span></span><br><span class="line"></span><br><span class="line">c = <span class="literal">true</span></span><br><span class="line">c = <span class="number">666</span> <span class="comment">// 警告： 不能将类型&quot;number&quot;分配给类型&quot;boolean&quot;</span></span><br></pre></td></tr></table></figure><p>给参数声明类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给x和y传递参数时必须传递数字类型，返回值也必须是数字</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">demo</span>(<span class="params"><span class="attr">x</span>:<span class="built_in">number</span>,<span class="attr">y</span>:<span class="built_in">number</span></span>):<span class="built_in">number</span>&#123;</span><br><span class="line"> <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">demo</span>(<span class="number">100</span>, <span class="number">200</span>)</span><br><span class="line"><span class="title function_">demo</span>(<span class="number">100</span>, <span class="string">&#x27;200&#x27;</span>) <span class="comment">// 警告：类型&quot;string&quot;的参数不能赋给类型&quot;number&quot;的参数</span></span><br><span class="line"><span class="title function_">demo</span>(<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>) <span class="comment">// 警告：应有 2 个参数，但获得 3 个</span></span><br></pre></td></tr></table></figure><h3 id="类型推断"><a href="#类型推断" class="headerlink" title="类型推断"></a>类型推断</h3><p>在没有声明类型的情况下，ts会自行推断出类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> d = -<span class="number">99</span>  <span class="comment">// 此时会自动推断变量d的类型为数字</span></span><br><span class="line">d = <span class="literal">false</span>  <span class="comment">// 警告：不能将类型&quot;boolean&quot;分配给类型&quot;number&quot;</span></span><br></pre></td></tr></table></figure><h3 id="类型总览"><a href="#类型总览" class="headerlink" title="类型总览"></a>类型总览</h3><p><code>JavaScript</code>中的数据类型：</p><article class="message is-warning">        <div class="message-header"><p>JavaScript</p></div>        <div class="message-body">            <p><code>string</code>、<code>number</code>、<code>boolean</code>、<code>null</code>、<code>undefined</code>、<code>bigint</code>、<code>symbol</code>、<code>object</code></p>        </div>    </article><blockquote><p>备注： 其中<code>object</code>包括：<code>Array</code>、<code>Function</code>、<code>Date</code>…..</p></blockquote><p><code>TypeScript</code>中的数据类型：</p><article class="message is-primary">        <div class="message-header"><p>TypeScript</p></div>        <div class="message-body">            <p>​· 以上所有</p><p>​· 四个新类型：<code>void</code>、 <code>never</code>、<code>unknown</code>、<code>any</code>、<code>enum</code>、<code>tuple</code></p><p>​· 自定义类型：<code>type</code>&amp;<code>interface</code></p>        </div>    </article><blockquote><p>注意：<code>JavaScript</code>中的三个构造函数：<code>Number</code>、<code>String</code>、<code>Boolean</code>，他们只用于包装对象，正常开发时，很少去使用他们，在<code>TypeScript</code>中也是同理</p></blockquote><p>总览：</p><table><thead><tr><th align="center">类型</th><th align="center">描述</th><th align="center">举例</th></tr></thead><tbody><tr><td align="center"><code>number</code></td><td align="center">任意数字</td><td align="center"><code>1</code>，<code>-1</code>，<code>1.5</code></td></tr><tr><td align="center"><code>string</code></td><td align="center">任意字符串</td><td align="center"><code>&#39;nihao&#39;</code>，<code>&#39;你好&#39;</code>，<code>&#39;hello&#39;</code></td></tr><tr><td align="center"><code>boolean</code></td><td align="center">布尔值</td><td align="center"><code>true</code>&amp;<code>false</code></td></tr><tr><td align="center"><code>字面量</code></td><td align="center">值只能是字面量值</td><td align="center">值本身</td></tr><tr><td align="center"><code>any</code></td><td align="center">任意类型</td><td align="center"><code>1</code>，<code>&#39;hello&#39;</code>，<code>true</code>……</td></tr><tr><td align="center"><code>unknown</code></td><td align="center">类型安全的<code>any</code></td><td align="center"><code>1</code>，<code>&#39;hello&#39;</code>，<code>true</code>……</td></tr><tr><td align="center"><code>never</code></td><td align="center">不能是任何值</td><td align="center">无值</td></tr><tr><td align="center"><code>void</code></td><td align="center">空 或 <code>undefined</code></td><td align="center">空 或 <code>undefined</code></td></tr><tr><td align="center"><code>object</code></td><td align="center">任意<code>JS</code>对象</td><td align="center"><code>&#123;name: &#39;张三&#39;&#125;</code></td></tr><tr><td align="center"><code>tuple</code></td><td align="center">元素，<code>TS</code>新增类型，固定长度数组</td><td align="center"><code>[3, 4]</code></td></tr><tr><td align="center"><code>enum</code></td><td align="center">枚举，<code>TS</code>新增类型</td><td align="center"><code>enum&#123;A, B&#125;</code></td></tr></tbody></table><h3 id="常用类型"><a href="#常用类型" class="headerlink" title="常用类型"></a>常用类型</h3><h4 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a><code>字面量</code></h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">a</span>:<span class="string">&#x27;你好&#x27;</span> <span class="comment">// a的值只能是字符串&#x27;你好&#x27;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">b</span>:<span class="number">100</span> <span class="comment">// b的值只能是数字100</span></span><br><span class="line"></span><br><span class="line">a = <span class="string">&#x27;hello&#x27;</span> <span class="comment">// 警告：不能将类型“&#x27;hello&#x27;”分配给类型“&#x27;你好&#x27;”</span></span><br><span class="line">b = <span class="number">200</span>  <span class="comment">// 警告：不能将类型“200”分配给类型“100”</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">gender</span>:<span class="string">&#x27;男&#x27;</span>|<span class="string">&#x27;女&#x27;</span> <span class="comment">// 定义一个变量gender，值只能为字符串“男”或“女”</span></span><br><span class="line">gender = <span class="string">&#x27;男&#x27;</span></span><br><span class="line">gender = <span class="string">&#x27;未知&#x27;</span> <span class="comment">// 警告：不能将类型“&#x27;未知&#x27;”分配给类型“&#x27;男&#x27;|&#x27;女&#x27;”</span></span><br></pre></td></tr></table></figure><h4 id="any"><a href="#any" class="headerlink" title="any"></a><code>any</code></h4><p><code>any</code>的含义是：任何类型。 一旦将变量类型限制为<code>any</code>，那就意味着放弃了对该变量的类型检查。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 明确表示a的类型是any —— 显式的any</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">a</span>:<span class="built_in">any</span> </span><br><span class="line"><span class="comment">// 以下对a的赋值，均⽆警告</span></span><br><span class="line">a = <span class="number">100</span></span><br><span class="line">a = <span class="string">&#x27;你好&#x27;</span></span><br><span class="line">a = <span class="literal">false</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 没有明确的表示b的类型是any，但TS主动推断了出来 —— 隐式的any</span></span><br><span class="line"><span class="keyword">let</span> b </span><br><span class="line"><span class="comment">// 以下对b的赋值，均⽆警告</span></span><br><span class="line">b = <span class="number">100</span></span><br><span class="line">b = <span class="string">&#x27;你好&#x27;</span></span><br><span class="line">b = <span class="literal">false</span></span><br></pre></td></tr></table></figure><blockquote><p>注意： any  类型的变量，可以赋值给任意类型的变量 ：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a</span><br><span class="line"><span class="keyword">let</span> <span class="attr">x</span>:<span class="built_in">string</span></span><br><span class="line">x = a <span class="comment">// ⽆警告</span></span><br></pre></td></tr></table></figure></blockquote><h4 id="unknown"><a href="#unknown" class="headerlink" title="unknown"></a><code>unknown</code></h4><p><code>unknown</code>的含义是：未知类型</p><blockquote><ol><li><code>unknown</code>可以理解为一个类型安全的<code>any</code></li><li><code>unknown</code>适用于：开始不知道数据的具体类型，后期才能确定数据的类型</li></ol></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置a的类型为unknown</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: <span class="built_in">unknown</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下对a的赋值均无警告</span></span><br><span class="line">a = <span class="number">100</span></span><br><span class="line">a = <span class="literal">false</span></span><br><span class="line">a = <span class="string">&#x27;你好&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置x的数据类型为string</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">x</span>:<span class="built_in">string</span></span><br><span class="line">x = a <span class="comment">// 警告： 不能将类型&#x27;unknown&#x27;分配给类型&#x27;string&#x27;</span></span><br></pre></td></tr></table></figure><p>如果想把a赋值给x， 可以用以下三种写法：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置a的类型为unknown</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">a</span>:<span class="built_in">unknown</span></span><br><span class="line">a = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1、类型判断</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> a === <span class="string">&#x27;string&#x27;</span>)&#123;</span><br><span class="line">    x = a</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、断言</span></span><br><span class="line">x = a <span class="keyword">as</span> <span class="built_in">string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、断言的另外一种写法</span></span><br><span class="line">x = &lt;<span class="built_in">string</span>&gt;a</span><br></pre></td></tr></table></figure><p><code>any</code>后点任何的东西都不会报错，<code>unknown</code>则相反</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">str1</span>:<span class="built_in">string</span> = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">str1.<span class="title function_">toUpperCase</span>() <span class="comment">// 无警告</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">str2</span>:<span class="built_in">any</span> = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">str2.<span class="title function_">toUpperCase</span>() <span class="comment">// 无警告</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">str3</span>:<span class="built_in">unknown</span> = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">str3.<span class="title function_">toUpperCase</span>() <span class="comment">// 警告：&quot;str3&quot;的类型为未知</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用断言强制指定str3的类型为string</span></span><br><span class="line">(str3 <span class="keyword">as</span> <span class="built_in">string</span>).<span class="title function_">toUpperCase</span>() <span class="comment">// 无警告</span></span><br></pre></td></tr></table></figure><h4 id="never"><a href="#never" class="headerlink" title="never"></a><code>never</code></h4><p><code>never</code>的含义是：任何值都不是，简言之就是不能有值，<code>undefined</code>、<code>null</code>、<code>&#39;&#39;</code>、<code>0</code>都不行！</p><ol><li><p>几乎不用<code>never</code>去限制变量，因为没有意义，例如：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 指定a的类型为never，那就意味着a以后不能存任何的数据</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">a</span>:<span class="built_in">never</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下对a的赋值都会有警告</span></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">a = <span class="literal">true</span></span><br><span class="line">a = <span class="literal">undefined</span></span><br><span class="line">a = <span class="literal">null</span></span><br></pre></td></tr></table></figure></li><li><p><code>never</code>一般是<code>TypeScript</code>主动推断出来的，例如：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 指定a的类型为string</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">a</span>:<span class="built_in">string</span></span><br><span class="line"><span class="comment">// 给a设置一个值</span></span><br><span class="line">a = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span> a === <span class="string">&#x27;string&#x27;</span>)&#123;</span><br><span class="line">    a.<span class="title function_">toUpperCase</span>()</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// TypeScript会推断出此处的a是never，因为没有任何一个值符合此处的逻辑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>never</code>也可以用于限制函数的返回值</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 限制demo函数不需要有任何返回值，任何值都不行，想undefined和null都不行</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">demo</span>(<span class="params"></span>):<span class="built_in">never</span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;程序异常退出&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="void"><a href="#void" class="headerlink" title="void"></a><code>void</code></h4><p><code>void</code>的含义是：<code>空</code>或者<code>undefined</code>，严格模式下不能加<code>null</code>赋值给<code>void</code>类型。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">a</span>:<span class="built_in">void</span> = <span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 严格模式下，该行会有警告：不能将类型“null”分配给类型“void”</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">b</span>:<span class="built_in">void</span> = <span class="literal">null</span></span><br></pre></td></tr></table></figure><p><code>void</code>常用于限制函数返回值</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 无警告</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">demo1</span>(<span class="params"></span>):<span class="built_in">void</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 无警告</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">demo2</span>(<span class="params"></span>):<span class="built_in">void</span>&#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 无警告</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">demo3</span>(<span class="params"></span>):<span class="built_in">void</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 警告：不能将类型“number”分配给类型“void”</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">demo4</span>(<span class="params"></span>):<span class="built_in">void</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">666</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="object"><a href="#object" class="headerlink" title="object"></a><code>object</code></h4><p>关于<code>Object</code>与<code>object</code>，直接说结论：在类型限制时，<code>Object</code>几乎不用，因为范围太大没有意义。</p><ol><li><p><code>object</code>  的含义：任何【⾮原始值类型】，包括：对象、函数、数组等，限制的范围⽐较宽泛，⽤的少</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">a</span>:<span class="built_in">object</span> <span class="comment">// a的值可以是任何【⾮原始值类型】，包括：对象、函数、数组等</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下代码，是将【⾮原始类型】赋给a，所以均⽆警告</span></span><br><span class="line">a = &#123;&#125;</span><br><span class="line">a = &#123;<span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>&#125;</span><br><span class="line">a = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br><span class="line">a = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 以下代码，是将【原始类型】赋给a，有警告</span></span><br><span class="line">a = <span class="literal">null</span>      <span class="comment">// 警告：不能将类型“null”分配给类型“object”</span></span><br><span class="line">a = <span class="number">1</span>         <span class="comment">// 警告：不能将类型“number”分配给类型“object”</span></span><br><span class="line">a = <span class="literal">true</span>      <span class="comment">// 警告：不能将类型“boolean”分配给类型“object”</span></span><br><span class="line">a = <span class="literal">undefined</span> <span class="comment">// 警告：不能将类型“undefined”分配给类型“object”</span></span><br><span class="line">a = <span class="string">&#x27;你好&#x27;</span>    <span class="comment">// 警告：不能将类型“string”分配给类型“object”</span></span><br></pre></td></tr></table></figure></li><li><p><code>Object</code>的含义：<code>Object</code>的实例对象，限制范围太大了，几乎不用</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">a</span>:<span class="title class_">Object</span> <span class="comment">//a的值必须是Object的实例对象，</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下代码，均⽆警告，因为给a赋的值，都是Object的实例对象</span></span><br><span class="line">a = &#123;&#125;</span><br><span class="line">a = &#123;<span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>&#125;</span><br><span class="line">a = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>]</span><br><span class="line">a = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">a = <span class="number">1</span>      <span class="comment">// 1不是Object的实例对象，但其包装对象是Object的实例</span></span><br><span class="line">a = <span class="literal">true</span>   <span class="comment">// true不是Object的实例对象，但其包装对象是Object的实例</span></span><br><span class="line">a = <span class="string">&#x27;你好&#x27;</span> <span class="comment">// “你好”不是Object的实例对象，但其包装对象是Object的实例</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下代码均有警告</span></span><br><span class="line">a = <span class="literal">null</span>       <span class="comment">// 警告：不能将类型“null”分配给类型“Object”</span></span><br><span class="line">a = <span class="literal">undefined</span>  <span class="comment">// 警告：不能将类型“undefined”分配给类型“Object”</span></span><br></pre></td></tr></table></figure></li><li><p>实际开发中，限制一般对象，通常使用一下形式</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 限制person对象的具体内容，使用&#x27;,&#x27;分隔，问号代表可选属性</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">person</span>:&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="built_in">string</span>,</span><br><span class="line">    age?:<span class="built_in">number</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 限制car对象的具体内容，使用&#x27;;&#x27;分隔，必须有price和color属性，其他属性不去限制，有没有都行</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">car</span>:&#123;</span><br><span class="line">    <span class="attr">price</span>: <span class="built_in">number</span>;</span><br><span class="line">    <span class="attr">color</span>: <span class="built_in">string</span>;</span><br><span class="line">    [<span class="attr">k</span>:<span class="built_in">string</span>]:<span class="built_in">any</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 限制student对象的具体内容，使用&#x27;回车&#x27;分隔。</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">student</span>:&#123;</span><br><span class="line">    <span class="attr">id</span>:<span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">grade</span>:<span class="built_in">number</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下代码均无警告</span></span><br><span class="line">person = &#123;<span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span>,&#125;</span><br><span class="line">person = &#123;<span class="attr">name</span>: <span class="string">&#x27;李四&#x27;</span>&#125;</span><br><span class="line">car = &#123;<span class="attr">price</span>: <span class="number">100</span>, <span class="attr">color</span>: <span class="string">&#x27;红色&#x27;</span>&#125;</span><br><span class="line">student = &#123;<span class="attr">id</span>: <span class="string">&#x27;123&#x27;</span>, <span class="attr">grade</span>: <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure></li><li><p>限制函数的参数、返回值，使⽤以下形式</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">demo</span>:<span class="function">(<span class="params"><span class="attr">a</span>:<span class="built_in">number</span>, <span class="attr">b</span>:<span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span></span><br><span class="line"></span><br><span class="line">demo = <span class="keyword">function</span>(<span class="params">x, y</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>限制数组，使用以下形式</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">arr1</span>:<span class="built_in">string</span>[] <span class="comment">// 等价于 let arr1:Array&lt;string&gt;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr2</span>:<span class="built_in">number</span>[] <span class="comment">//等价于 let arr2:Array&lt;number&gt;</span></span><br><span class="line"></span><br><span class="line">arr1 = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">arr2 = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure></li></ol><h4 id="tuple"><a href="#tuple" class="headerlink" title="tuple"></a><code>tuple</code></h4><p><code>tuple</code>就是一个长度固定的数组。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">t</span>:[<span class="built_in">string</span>, <span class="built_in">number</span>]</span><br><span class="line"></span><br><span class="line">t = [<span class="string">&#x27;hello&#x27;</span>, <span class="number">123</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 警告：不能将类型“[string, number, boolean]”分配给类型“[string, number]”</span></span><br><span class="line">t = [<span class="string">&#x27;hello&#x27;</span>, <span class="number">123</span>, <span class="literal">false</span>]</span><br></pre></td></tr></table></figure><h4 id="enum"><a href="#enum" class="headerlink" title="enum"></a><code>enum</code></h4><p><code>enum</code>是枚举</p><figure class="highlight typescript"><figcaption><span>点击展开 >folded</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 定义一个枚举</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">    <span class="title class_">Red</span>,</span><br><span class="line">    <span class="title class_">Blue</span>,</span><br><span class="line">    <span class="title class_">Blace</span>,</span><br><span class="line">    <span class="title class_">Gold</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个枚举，并指定其初始数值</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Color2</span>&#123;</span><br><span class="line">    <span class="title class_">Red</span> = <span class="number">6</span>,</span><br><span class="line">    <span class="title class_">Blue</span>,</span><br><span class="line">    <span class="title class_">Black</span>,</span><br><span class="line">    <span class="title class_">Gold</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Color</span>)</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">  &#123;</span></span><br><span class="line"><span class="comment">    0: &#x27;Red&#x27;, </span></span><br><span class="line"><span class="comment">    1: &#x27;Blue&#x27;, </span></span><br><span class="line"><span class="comment">    2: &#x27;Black&#x27;, </span></span><br><span class="line"><span class="comment">    3: &#x27;Gold&#x27;, </span></span><br><span class="line"><span class="comment">    Red: 0, </span></span><br><span class="line"><span class="comment">    Blue: 1, </span></span><br><span class="line"><span class="comment">    Black: 2, </span></span><br><span class="line"><span class="comment">    Gold: 3</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Color2</span>)</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">  &#123;</span></span><br><span class="line"><span class="comment">    6: &#x27;Red&#x27;, </span></span><br><span class="line"><span class="comment">    7: &#x27;Blue&#x27;, </span></span><br><span class="line"><span class="comment">    8: &#x27;Black&#x27;, </span></span><br><span class="line"><span class="comment">    9: &#x27;Gold&#x27;, </span></span><br><span class="line"><span class="comment">    Red: 6, </span></span><br><span class="line"><span class="comment">    Blue: 7, </span></span><br><span class="line"><span class="comment">    Black: 8, </span></span><br><span class="line"><span class="comment">    Gold: 9</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个phone变量，并对其设置限制</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">phone</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">price</span>:<span class="built_in">number</span>,</span><br><span class="line">    <span class="attr">color</span>:<span class="title class_">Color</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">phone = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;iPhone&#x27;</span>,</span><br><span class="line">    <span class="attr">price</span>: <span class="string">&#x27;6000&#x27;</span></span><br><span class="line">    <span class="attr">color</span>: <span class="title class_">Color</span>.<span class="property">Red</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(phone.<span class="property">color</span> === <span class="title class_">Color</span>.<span class="property">Red</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;手机是红色的&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="自定义类型"><a href="#自定义类型" class="headerlink" title="自定义类型"></a>自定义类型</h3><p>⾃定义类型，可以更灵活的限制类型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 性别的枚举</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Gender</span> &#123;</span><br><span class="line"> <span class="title class_">Male</span>,</span><br><span class="line"> <span class="title class_">Female</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ⾃定义⼀个年级类型（⾼⼀、⾼⼆、⾼三）</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Grade</span> = <span class="number">1</span> | <span class="number">2</span> | <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ⾃定义⼀个学⽣类型</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Student</span> = &#123;</span><br><span class="line"> <span class="attr">name</span>: <span class="built_in">string</span>,</span><br><span class="line"> <span class="attr">age</span>: <span class="built_in">number</span>,</span><br><span class="line"> <span class="attr">gender</span>: <span class="title class_">Gender</span>,</span><br><span class="line"> <span class="attr">grade</span>: <span class="title class_">Grade</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义两个学⽣变量：s1、s2</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">s1</span>:<span class="title class_">Student</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">s2</span>:<span class="title class_">Student</span></span><br><span class="line">s1 = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">18</span>,</span><br><span class="line">    <span class="attr">gender</span>:<span class="title class_">Gender</span>.<span class="property">Male</span>,</span><br><span class="line">    <span class="attr">grade</span>:<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">s2 = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;李四&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">18</span>,</span><br><span class="line">    <span class="attr">gender</span>:<span class="title class_">Gender</span>.<span class="property">Female</span>,</span><br><span class="line">    <span class="attr">grade</span>:<span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><p>常规类：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"> <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line"> <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line"> <span class="title function_">constructor</span>(<span class="params"><span class="attr">name</span>:<span class="built_in">string</span>,<span class="attr">age</span>:<span class="built_in">number</span></span>)&#123;</span><br><span class="line"> <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line"> <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;张三&#x27;</span>,<span class="number">18</span>)</span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;李四&#x27;</span>,<span class="number">19</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p2)</span><br></pre></td></tr></table></figure><p>继承：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Person类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Teacher类继承Person</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Student类继承Person</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Person实例</span></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;周杰伦&#x27;</span>, <span class="number">38</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Student实例</span></span><br><span class="line"><span class="keyword">const</span> s1 = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&#x27;张同学&#x27;</span>, <span class="number">18</span>)</span><br><span class="line"><span class="keyword">const</span> s2 = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&#x27;李同学&#x27;</span>, <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Teacher实例</span></span><br><span class="line"><span class="keyword">const</span> t1 = <span class="keyword">new</span> <span class="title class_">Teacher</span>(<span class="string">&#x27;刘⽼师&#x27;</span>, <span class="number">40</span>)</span><br><span class="line"><span class="keyword">const</span> t2 = <span class="keyword">new</span> <span class="title class_">Teacher</span>(<span class="string">&#x27;孙⽼师&#x27;</span>, <span class="number">50</span>)</span><br></pre></td></tr></table></figure><p>抽象类：不能去实例化，但可以被别⼈继承，抽象类⾥有抽象⽅法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Person（抽象类）</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Teacher类继承Person</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line"> <span class="comment">// 构造器</span></span><br><span class="line"><span class="title function_">constructor</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">age</span>: <span class="built_in">number</span></span>)&#123;</span><br><span class="line"> <span class="variable language_">super</span>(name, age)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// ⽅法</span></span><br><span class="line"><span class="title function_">speak</span>(<span class="params"></span>)&#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你好！我是⽼师:&#x27;</span>, <span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Student类继承Person</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Person实例</span></span><br><span class="line"><span class="comment">// const p1 = new Person(&#x27;周杰伦&#x27;,38) </span></span><br><span class="line"><span class="comment">// 由于Person是抽象类，所以此处不可以new Person的实例对象</span></span><br></pre></td></tr></table></figure><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>接口梳理：</p><ol><li><p>接口用于限制一个类中包含那些属性和方法：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Person 接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="comment">// 属性声明</span></span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">    <span class="comment">// 方法声明</span></span><br><span class="line">    <span class="title function_">speak</span>():<span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Teacher实现Person接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span> <span class="keyword">implements</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">    <span class="comment">// 构造器</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">age</span>: <span class="built_in">number</span></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 方法</span></span><br><span class="line">    <span class="title function_">speak</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你好，我是：&#x27;</span>, <span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>接口是可以重复声明的：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Person接口 </span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">PersonInter</span> &#123;</span><br><span class="line">    <span class="comment">// 属性声明</span></span><br><span class="line">    <span class="attr">name</span>: sting</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Person接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">PersonInter</span> &#123;</span><br><span class="line">    <span class="comment">// 方法声明</span></span><br><span class="line">    <span class="title function_">speak</span>():<span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Person类继承PersonInter</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">PersonInter</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">    <span class="comment">// 构造器</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="attr">name</span>: <span class="built_in">string</span>, <span class="attr">age</span>: <span class="built_in">number</span></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 方法</span></span><br><span class="line">    <span class="title function_">speak</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你好，我是：&#x27;</span>, <span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>“接口”与”自定义类型”的区别：</p><article class="message is-info">                <div class="message-body">            <p> 接口可以：</p><p> ​ 1. 当自定义类型去使用<br>      2. 可以限制类的结构</p><p>自定义类型：</p><p>​ 1. 仅仅就是自定义类型</p>        </div>    </article><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Person接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="comment">// 应该具有的属性</span></span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">    <span class="comment">// 应该具有的方法</span></span><br><span class="line">    <span class="title function_">speak</span>():<span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Person类型</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">  * type Person = &#123;</span></span><br><span class="line"><span class="comment">  *   name: string</span></span><br><span class="line"><span class="comment">  *   age: number</span></span><br><span class="line"><span class="comment">  * &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">   </span><br><span class="line"><span class="comment">// 接口当自定义类型去使用</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">person</span>:<span class="title class_">Person</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="title function_">speak</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;你好&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>“接口”与”抽象类”的区别</p><article class="message is-info">                <div class="message-body">            <p>抽象类：</p><p>​    1. 以有普通方法，也可以有抽象方法<br>​        2. 用<code>extends</code>关键字去继承抽象类<br>接口中：</p><p>​    1. 只能有抽象方法<br>​    2. 使用<code>implements</code>关键字去实现接口</p>        </div>    </article><p>抽象类举例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象类 ——— Person</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="comment">// 属性</span></span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">    <span class="comment">// 构造器</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="attr">name</span>:<span class="built_in">string</span>, <span class="attr">age</span>:<span class="built_in">number</span></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 抽象方法</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="title function_">speak</span>():<span class="built_in">void</span></span><br><span class="line">    <span class="comment">// 普通方法</span></span><br><span class="line">    <span class="title function_">walk</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我在走&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Teacher类继承抽象类Person</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="attr">name</span>:<span class="built_in">string</span>, <span class="attr">age</span>:<span class="built_in">number</span></span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>(name, age)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">speak</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`我是<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口举例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接口 ——— Person, 只能包含抽象方法</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="comment">// 属性，不写具体值</span></span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">    <span class="comment">// 方法，不写具体实现</span></span><br><span class="line">    <span class="title function_">speak</span>():<span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建Teacher类实现Person接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span> <span class="keyword">implements</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="attr">name</span>:<span class="built_in">string</span>, <span class="attr">age</span>:<span class="built_in">number</span></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">speak</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我在走&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="属性修饰符"><a href="#属性修饰符" class="headerlink" title="属性修饰符"></a>属性修饰符</h3><table><thead><tr><th align="center">修饰符</th><th align="center">含义</th><th align="center">解释</th></tr></thead><tbody><tr><td align="center"><code>readonly</code></td><td align="center">只读属性</td><td align="center">属性无法更改</td></tr><tr><td align="center"><code>public</code></td><td align="center">公开的</td><td align="center">可以在类、子类和对象中修改</td></tr><tr><td align="center"><code>protected</code></td><td align="center">受保护的</td><td align="center">可以在类、子类中修改</td></tr><tr><td align="center"><code>private</code></td><td align="center">私有的</td><td align="center">可以在类中修改</td></tr></tbody></table><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><p>定义一个函数或类时，有些情况下无法确定其中要使用的具体类型（返回值、参数、属性的类型不能确定），此时就需要泛型了</p><p>举例：<code>&lt;T&gt;</code>就是泛型，（不一定非叫<code>&lt;T&gt;</code>），设置泛型之后即可在函数中使用<code>T</code>来表示该类型：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> text&lt;T&gt;(<span class="attr">arg</span>: T): T&#123;</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不指明类型，TS会自动推断出来</span></span><br><span class="line"><span class="title function_">test</span>(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指明具体的类型</span></span><br><span class="line">test&lt;<span class="built_in">number</span>&gt;(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>泛型还可以写多个：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> test&lt;T, K&gt;(<span class="attr">a</span>: T, <span class="attr">b</span>: K) K&#123;</span><br><span class="line"><span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为多个泛型指定具体值</span></span><br><span class="line">test&lt;<span class="built_in">number</span>, <span class="built_in">string</span>&gt;(<span class="number">10</span>, <span class="string">&#x27;hello&#x27;</span>)</span><br></pre></td></tr></table></figure><p>类中同样可以使用泛型</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>&lt;T&gt;&#123;</span><br><span class="line">    <span class="attr">prop</span>: T</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="attr">prop</span>: T</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">prop</span> = prop</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以对泛型的范围进行约束：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Demo</span>&#123;</span><br><span class="line">    <span class="attr">length</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 泛型T必须是MyInter的子类，即：必须拥有length属性</span></span><br><span class="line"><span class="keyword">function</span> text&lt;T <span class="keyword">extends</span> <span class="title class_">Demo</span>&gt;(<span class="attr">arg</span>: T): <span class="built_in">number</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arg.<span class="property">length</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="number">10</span>) <span class="comment">// 类型“number”的参数不能赋给类型“Demo”的参数</span></span><br><span class="line"><span class="title function_">test</span>(&#123;<span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>&#125;) <span class="comment">// 类型“test(&#123;name: &#x27;张三&#x27;&#125;)”的参数不能赋给类型“Demo”的参数</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&#x27;123&#x27;</span>)</span><br><span class="line"><span class="title function_">test</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>, <span class="attr">length</span>: <span class="number">10</span>&#125;)</span><br></pre></td></tr></table></figure><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>希望以上笔记能对你有帮助，当然如果你在使用TS时弄不清类型，又不想看到警告，完全可以使用<code>any</code>声明。这也是为什么<code>TypeScript</code>又被大家叫做<code>AnyScript</code>🤪</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;code&gt;JavaScript&lt;/code&gt;是非常灵活的一门编程语言，但是这种灵活是把双刃剑，一方面使得JavaScript蓬勃发展，无所不能；另一方面也使它的代码质量参差不齐，维护成本高，运行时错误多。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;TypeScript&lt;/code&gt;是具有类型的JavaScript，在很大程度上弥补了它的缺点。&lt;/p&gt;</summary>
    
    
    
    <category term="web" scheme="https://www.f2iclo.cn/categories/web/"/>
    
    <category term="TypeScript" scheme="https://www.f2iclo.cn/categories/web/TypeScript/"/>
    
    
    <category term="typescript" scheme="https://www.f2iclo.cn/tags/typescript/"/>
    
    <category term="javascript" scheme="https://www.f2iclo.cn/tags/javascript/"/>
    
    <category term="web" scheme="https://www.f2iclo.cn/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>unittest框架总结以及ddt数据驱动</title>
    <link href="https://www.f2iclo.cn/2024/08/29/unittest-ddt/"/>
    <id>https://www.f2iclo.cn/2024/08/29/unittest-ddt/</id>
    <published>2024-08-29T08:18:11.000Z</published>
    <updated>2024-09-04T12:27:42.703Z</updated>
    
    <content type="html"><![CDATA[<h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><p><i style='color:gray;'>本文章于 2023 年学习时记录，无法保证准确性</i></p><h4 id="用例编写"><a href="#用例编写" class="headerlink" title="用例编写"></a>用例编写</h4><p>unittest 是 Python 自带的一个单元测试框架</p><p>此外，unittest 还支持自动化测试的接口测试、UI 测试。</p><span id="more"></span><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestDemo</span>(unittest.TestCase):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_01_demo</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.assertEqual(<span class="number">1</span>, <span class="number">2</span>, <span class="string">&quot;判断1和2相等&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_02_demo</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.assertEqual(<span class="number">1</span>, <span class="number">1</span>, <span class="string">&quot;判断1和1相等&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure><p>使用 unittest 编写测试用例，必须使用<strong>测试类</strong>来进行。</p><p>在测试类里面的方法就是测试用例了。</p><p>注意，测试用例的方法必须是以<code>test</code>开头的才可以。</p><p>例如上述代码的<code>test_01_demo</code></p><p><code>unittest.main()</code>会自动的发现模块中的所有测试类中的测试用例。</p><p>在测试用例中的方法中，我们可以使用<code>testCase</code>自带的断言功能来实现对预期结果和实践<br>结果的判断。</p><h4 id="TestSuite"><a href="#TestSuite" class="headerlink" title="TestSuite"></a><strong><code>TestSuite</code></strong></h4><p>我们可以使用<strong>测试套件</strong>，把不同的测试用例都加载添加到测试套件中</p><p>通过直接运行测试套件来实现运行不同模块中的测试用例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line">suite = unittest.TestSuite()</span><br><span class="line"><span class="keyword">case</span> = unittest.defaultTestLoader.discover(start_dir=<span class="string">&#x27;.&#x27;</span>, pattern=<span class="string">&quot;test*.py&quot;</span>)</span><br><span class="line">suite.addTest(<span class="keyword">case</span>)</span><br></pre></td></tr></table></figure><p>上述代码中使用<code>unittest.defaultTestLoader.discover</code>方法就可以实现在指定的文件夹<br>中区自动的发现我们的测试用例</p><p><code>start_dir</code>后面是测试模块所在的文件目录，如果在同一目录则是<code>.</code></p><p><code>pattern</code>参数后跟的是以 test 开头的 python 文件如”test01.py” “test02.py”，因此我<br>们文件要以有规律化的方式起名</p><p>最后使用<code>suite.addTest</code>的方法把发现的测试用例加载到测试套件中。</p><h4 id="运行套件以及生成测试报告"><a href="#运行套件以及生成测试报告" class="headerlink" title="运行套件以及生成测试报告"></a>运行套件以及生成测试报告</h4><p>unittest 自带的测试报告是文本格式的，可读性不好，所以我们一般用第三方的模块来生<br>成测试报告</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"><span class="keyword">from</span> HTMLTestRunner <span class="keyword">import</span> HTMLTestRunner</span><br><span class="line"></span><br><span class="line">suite = unittest.TestSuite()</span><br><span class="line"><span class="keyword">case</span> = unittest.defaultTestLoader.discover(start_dir=<span class="string">&#x27;.&#x27;</span>, pattern=<span class="string">&quot;test*.py&quot;</span>)</span><br><span class="line"></span><br><span class="line">suite.addTest(<span class="keyword">case</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;测试报告.html&quot;</span>, <span class="string">&quot;wb&quot;</span>)<span class="keyword">as</span> f:</span><br><span class="line">    runner = HTMLTestRunner(stream=f, title=<span class="string">&quot;测试报告&quot;</span>, description=<span class="string">&quot;这是项目的描述&quot;</span>)</span><br><span class="line">    runner.run(suite)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>HTMLTestRunner</code>是我们经常使用的第三方模块，可以将生成的测试报告以 HTML 方式展现<br>。其中：</p><p><code>stream</code>是要把测试报告的文件保存到那个文件目录中</p><p><code>title</code>是测试报告的标题</p><p><code>description</code>是对测试报告的详细描述</p><hr><h3 id="assert断言"><a href="#assert断言" class="headerlink" title="assert断言"></a><code>assert</code>断言</h3><h4 id="常用的断言"><a href="#常用的断言" class="headerlink" title="常用的断言"></a>常用的断言</h4><ol><li><code>assertEqual</code>判断两个值是否相等</li><li><code>assertNotEqual</code>判断两个值是否不相等</li><li><code>assertTrue</code>判断结果是否为真</li><li><code>assertFalse</code>判断结果是否为假</li><li><code>assertIn</code>判断第一个值是否在第二个值范围内</li><li><code>assertNotIn</code>判断第一个值是否不在第二个值的范围内</li><li><code>assertIs</code>判断两个对象是否属于同一对象</li><li><code>assertIsNot</code>判断两个对象是否不属于同一种对象</li><li><code>assertIsNone</code>判断某个值是否为空</li><li><code>assertIsNotNone</code>判断某个是是否不为空</li><li><code>assertIsInstance</code>判断某个对象是否属于某个 class 实例</li><li><code>assertNotIsInstance</code>判断某个对象是否不属于某个 class 实例</li></ol><p>代码示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo2</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">aa = Demo</span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">b = a</span><br><span class="line">c = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestDemo</span>(unittest.TestCase):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_01_demo</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.assertEqual(<span class="number">1</span>, <span class="number">1</span>, <span class="string">&quot;判断两个值是否相等&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.assertNotEqual(<span class="number">1</span>, <span class="number">2</span>, <span class="string">&quot;判断两个值是否不相等&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.assertTrue(<span class="number">1</span> == <span class="number">1</span>, <span class="string">&quot;判断结果是否为真&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.assertFalse(<span class="number">1</span> == <span class="number">2</span>, <span class="string">&quot;判断结果是否为假&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.assertIn(<span class="number">1</span>, [<span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>], <span class="string">&quot;判断第一个值是否在第二个容器内&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.assertNotIn(<span class="number">1</span>, [<span class="number">3</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="string">&quot;判断第一个值是否不在第二个容器内&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.assertIs(a, b, <span class="string">&quot;判断任意两个对象是否属于同一个对象&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.assertIsNot(a, <span class="number">3</span>, <span class="string">&quot;判断任意两个对象是否不属于同一个对象&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.assertIsNone(c, <span class="string">&quot;判断某个值是否为空值&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.assertIsNotNone(a, <span class="string">&quot;判断某个值是否不为空&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.assertIsInstance(aa, Demo, <span class="string">&quot;判断某个对象是否属于某个class实例&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.assertNotIsInstance(aa, Demo2, <span class="string">&quot;判断某个对象是否不属于某个class实例&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    unittest.main()</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h3 id="unittest装饰器"><a href="#unittest装饰器" class="headerlink" title="unittest装饰器"></a><code>unittest</code>装饰器</h3><p><code>testCase</code>带有很多不同的装饰器来实现我们测试用例的运行过程。</p><p>但是在实际工作中会有大量的测试用例，但不是所有的用例都是需要运行的。</p><p>有的用例需要根据不同的情况来判断是否需要运行。</p><p>我们可以利用<code>testCase</code>自带的装饰器来实现用例运行过程的控制。</p><h4 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h4><p><code>@unittest.skip()</code> 控制某条用例不运行</p><p><code>@unittest.skipif()</code> 如果条件为真，用例不运行</p><p><code>@unittest.skipUnless()</code>如果条件为假，用例不运行</p><p><code>@unittest.expectedFailure</code>预期测试失败，失败时输出<code>x</code>成功时输出<code>u</code></p><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TestDemo</span>(unittest.TestCase):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_01_demo</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.assertEqual(<span class="number">1</span>, <span class="number">1</span>, <span class="string">&quot;判断两个值是否相等&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.assertNotEqual(<span class="number">1</span>, <span class="number">2</span>, <span class="string">&quot;判断两个值是否不相等&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_02_demo</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.assertEqual(<span class="number">1</span>, <span class="number">1</span>, <span class="string">&quot;判断两个值是否相等&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.assertNotEqual(<span class="number">1</span>, <span class="number">1</span>, <span class="string">&quot;判断两个值是否不相等&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @unittest.skip(<span class="params"><span class="string">&quot;跳过第三条用例&quot;</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_03_demo</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.assertEqual(<span class="number">1</span>, <span class="number">1</span>, <span class="string">&quot;判断两个值是否相等&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.assertNotEqual(<span class="number">1</span>, <span class="number">2</span>, <span class="string">&quot;判断两个值是否不相等&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @unittest.skipIf(<span class="params"><span class="literal">True</span>, <span class="string">&quot;结果为真，跳过用例&quot;</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_04_demo</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.assertEqual(<span class="number">1</span>, <span class="number">1</span>, <span class="string">&quot;判断两个值是否相等&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.assertNotEqual(<span class="number">1</span>, <span class="number">2</span>, <span class="string">&quot;判断两个值是否不相等&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @unittest.skipUnless(<span class="params"><span class="literal">False</span>, <span class="string">&quot;结果为假，跳过用例&quot;</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_05_demo</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.assertEqual(<span class="number">1</span>, <span class="number">1</span>, <span class="string">&quot;判断两个值是否相等&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.assertNotEqual(<span class="number">1</span>, <span class="number">2</span>, <span class="string">&quot;判断两个值是否不相等&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @unittest.expectedFailure </span><span class="comment"># 预期失败</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_06_demo</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.assertEqual(<span class="number">1</span>, <span class="number">1</span>, <span class="string">&quot;判断两个值是否相等&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.assertNotEqual(<span class="number">1</span>, <span class="number">1</span>, <span class="string">&quot;判断两个值是否不相等&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @unittest.expectedFailure</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_07_demo</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.assertEqual(<span class="number">1</span>, <span class="number">1</span>, <span class="string">&quot;判断两个值是否相等&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.assertNotEqual(<span class="number">1</span>, <span class="number">2</span>, <span class="string">&quot;判断两个值是否不相等&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>控制台结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.Fsssxu</span><br><span class="line">======================================================================</span><br><span class="line">FAIL: test_02_demo (__main__.TestDemo.test_02_demo)</span><br><span class="line">----------------------------------------------------------------------</span><br></pre></td></tr></table></figure><h4 id="运行结果的说明"><a href="#运行结果的说明" class="headerlink" title="运行结果的说明"></a>运行结果的说明</h4><p><code>.</code>表示测试通过</p><p><code>F</code>表示测试失败</p><p><code>s</code>表示测试跳过</p><p><code>x</code>表示预期失败</p><p><code>u</code>表示与预期相反</p><hr><h3 id="fixture测试夹具"><a href="#fixture测试夹具" class="headerlink" title="fixture测试夹具"></a><code>fixture</code>测试夹具</h3><p>以初始化的夹具在前，测试运行结束后的夹具在后运行测试用例。</p><p>测试夹具的作用可以把我们在测试运行前和运行结束后需要运行的代码抽离出来，单独放到<br>夹具中区运行。方便我们对代码的组织和维护，减少重复的代码量。</p><p><code>setUp</code>以及<code>setDown</code>是面向测试用例</p><p><code>setUpClass</code>以及<code>tearDownClass</code>是面向测试类</p><p>两者可以组合使用同时出现</p><!--此外还有setUpModule以及tearDownModule是面向测试模块的--><h4 id="setUp"><a href="#setUp" class="headerlink" title="setUp"></a><code>setUp</code></h4><p>在每个测试用例前运行，一般在里面写一些实现测试用例的前置条件</p><h4 id="tearDown"><a href="#tearDown" class="headerlink" title="tearDown"></a><code>tearDown</code></h4><p>在每个测试用例运行结束后运行，一般在里面写一些清理环境，释放资源之类的代码</p><h4 id="setUpClass"><a href="#setUpClass" class="headerlink" title="setUpClass"></a><code>setUpClass</code></h4><p>在每个测试类运行前运行 代码前需要带上<code>@classmethod</code> 装饰器</p><h4 id="tearDownClass"><a href="#tearDownClass" class="headerlink" title="tearDownClass"></a><code>tearDownClass</code></h4><p>在每个测试类结束运行之后运行 代码前需要带上<code>@classmethod</code> 装饰器</p><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TestDemo</span>(unittest.TestCase):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setUp</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;开始运行测试用例&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">tearDown</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;测试用例运行结束&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setUpClass</span>(<span class="params">cls</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;开始运行测试类&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">tearDownClass</span>(<span class="params">cls</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;测试类结束运行&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_01_demo</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.assertEqual(<span class="number">1</span>, <span class="number">1</span>, <span class="string">&quot;判断是否相等&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_02_demo</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.assertEqual(<span class="number">1</span>, <span class="number">1</span>, <span class="string">&quot;判断是否相等&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_03_demo</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.assertEqual(<span class="number">1</span>, <span class="number">1</span>, <span class="string">&quot;判断是否相等&quot;</span>)</span><br></pre></td></tr></table></figure><hr><h3 id="清理函数"><a href="#清理函数" class="headerlink" title="清理函数"></a>清理函数</h3><p>清理函数默认在<code>tearDown</code>后运行</p><p>清理函数的使用，需要先自己封装一个方法，这个方法里面的的代码就是用来清理的</p><p>清理函数可以放在测试类中的任何位置，通过<code>addCleanup()</code>注册我们的清理函数</p><p>清理函数可以使用<code>doCleanups()</code>对某个用例生效，也可放在<code>setUp</code>中对所有用例生效</p><p>在 python3.9 之后新增了<code>addClassCleanup</code>以及<code>doClassCleanup</code>，他们是针对测试类进<br>行清理，用法同上。</p><p><code>addClassCleanup</code>一般与<code>setClassUp</code>搭配使用</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">clear</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;开始清理函数&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestDemo</span>(unittest.TestCase):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setUp</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="variable language_">self</span>.addCleanup(clear)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;开始运行测试&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">tearDown</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;测试运行结束&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_01_demo</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.assertEqual(<span class="number">1</span>, <span class="number">1</span>, <span class="string">&quot;判断是否相等&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_02_demo</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.assertEqual(<span class="number">1</span>, <span class="number">1</span>, <span class="string">&quot;判断是否相等&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_03_demo</span>(<span class="params">self</span>):</span><br><span class="line">        slf.assertEqual(<span class="number">1</span>, <span class="number">1</span>, <span class="string">&quot;判断是否相等&quot;</span>)</span><br><span class="line">        <span class="comment"># self.doCleanups()</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_04_demo</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.assertEqual(<span class="number">1</span>, <span class="number">1</span>, <span class="string">&quot;判断是否相等&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_05_demo</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.assertEqual(<span class="number">1</span>, <span class="number">1</span>, <span class="string">&quot;判断是否相等&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure><p>注意：清理函数不是必须要和夹具配置使用，也可以单独使用。</p><hr><h3 id="ddt-数据驱动"><a href="#ddt-数据驱动" class="headerlink" title="ddt 数据驱动"></a>ddt 数据驱动</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>ddt 是 python 的一个专门从来实现数据驱动的第三方的包</p><p>使用 ddt 数据驱动来实现数据与测试分离管理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 使用pip下载</span><br><span class="line">pip install ddt -i https://pypi.douban.com/simple</span><br></pre></td></tr></table></figure><p>下载后即可通过导包来使用 ddt</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用Python导包</span></span><br><span class="line">form ddt <span class="keyword">import</span> ddt, data, unpack, file_data <span class="comment"># 装饰器</span></span><br></pre></td></tr></table></figure><h4 id="各项装饰器的使用"><a href="#各项装饰器的使用" class="headerlink" title="各项装饰器的使用"></a>各项装饰器的使用</h4><h5 id="ddt"><a href="#ddt" class="headerlink" title="ddt"></a>ddt</h5><p>在测试用例前加上<code>@ddt</code>装饰器即可使用 ddt 数据驱动</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ddt</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestDemo</span>(unittest.TestCase):</span><br></pre></td></tr></table></figure><h5 id="data"><a href="#data" class="headerlink" title="data"></a>data</h5><p>需要进行测试的数据，放在 data 中。在测试中直接引用 value 即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ddt <span class="keyword">import</span> ddt, data, unpack, file_data</span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"><span class="meta">@ddt</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestDemo</span>(unittest.TestCase):</span><br><span class="line"><span class="meta">    @data(<span class="params"><span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_01_demo</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="variable language_">self</span>.assertEqual(<span class="number">1</span>, value, <span class="string">&quot;判断是否相等&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure><h5 id="file-data"><a href="#file-data" class="headerlink" title="file_data"></a>file_data</h5><p>可以实现自动的从文件中读取测试数据，不需要像 data 一样手动传入数据。</p><p>可以使用 json 或者 yaml</p><p>例如在同目录下有名为 data.json 数据文件时</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;01&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;张三&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">23</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;02&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;李四&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">24</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;03&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;王五&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">25</span> <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>在测试时可以用@file_data 直接引用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ddt <span class="keyword">import</span> ddt, data, unpack, file_data</span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"><span class="meta">@ddt</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestDemo</span>(unittest.TestCase):</span><br><span class="line"><span class="meta">@file_data(<span class="params"><span class="string">&quot;data.json&quot;</span></span>)</span></span><br><span class="line"><span class="meta">    @unpack</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_05_demo</span>(<span class="params">self, age, name</span>):</span><br><span class="line">        <span class="variable language_">self</span>.assertEqual(<span class="number">23</span>, age, name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure><p>同理在引用 yaml 文件时操作相同，但注意：</p><p>ddt 是直接支持 json 格式文件的读取，但是对于 yaml 文件需要额外安装一个第三方的<br>python 包才可以。pyyaml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pyyaml -i https://douban.com/simple</span><br></pre></td></tr></table></figure><h5 id="unpack"><a href="#unpack" class="headerlink" title="unpack"></a>unpack</h5><p>对数据进行解包，特别在每项数据都是成组出现时</p><p>例如数据内为元组时</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ddt <span class="keyword">import</span> ddt, data, unpack, file_data</span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"><span class="meta">@ddt</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestDemo</span>(unittest.TestCase):</span><br><span class="line">    <span class="comment"># 不使用unpack时</span></span><br><span class="line"><span class="meta">    @data(<span class="params">(<span class="params"><span class="number">1</span>, <span class="number">2</span></span>), (<span class="params"><span class="number">2</span>, <span class="number">2</span></span>), (<span class="params"><span class="number">3</span>, <span class="number">4</span></span>)</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_01_demo</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="variable language_">self</span>.assertEqual(value[<span class="number">0</span>], value[<span class="number">1</span>], <span class="string">&quot;判断是否相等&quot;</span>)</span><br><span class="line">    <span class="comment"># 使用unpack时</span></span><br><span class="line"><span class="meta">    @data(<span class="params">(<span class="params"><span class="number">1</span>, <span class="number">2</span></span>), (<span class="params"><span class="number">2</span>, <span class="number">2</span></span>), (<span class="params"><span class="number">3</span>, <span class="number">4</span></span>)</span>)</span></span><br><span class="line"><span class="meta">    @unpack</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_02_demo</span>(<span class="params">self,value1, value2</span>):</span><br><span class="line">        <span class="variable language_">self</span>.assertEqual(value1, value2, <span class="string">&quot;判断是否相等&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure><p>例如数据内为字典时</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ddt <span class="keyword">import</span> ddt, data, unpack, file_data</span><br><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@ddt</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestDemo</span>(unittest.TestCase):</span><br><span class="line"></span><br><span class="line"><span class="meta">    @data(<span class="params">&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;张三&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">23</span>&#125;, &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">24</span>&#125;, &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;王五&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">25</span>&#125;</span>)</span></span><br><span class="line"><span class="meta">    @unpack</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_01_demo</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        <span class="variable language_">self</span>.assertEqual(<span class="number">23</span>, age, name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;快速入门&quot;&gt;&lt;a href=&quot;#快速入门&quot; class=&quot;headerlink&quot; title=&quot;快速入门&quot;&gt;&lt;/a&gt;快速入门&lt;/h3&gt;&lt;p&gt;&lt;i style=&#39;color:gray;&#39;&gt;本文章于 2023 年学习时记录，无法保证准确性&lt;/i&gt;&lt;/p&gt;
&lt;h4 id=&quot;用例编写&quot;&gt;&lt;a href=&quot;#用例编写&quot; class=&quot;headerlink&quot; title=&quot;用例编写&quot;&gt;&lt;/a&gt;用例编写&lt;/h4&gt;&lt;p&gt;unittest 是 Python 自带的一个单元测试框架&lt;/p&gt;
&lt;p&gt;此外，unittest 还支持自动化测试的接口测试、UI 测试。&lt;/p&gt;</summary>
    
    
    
    <category term="Python" scheme="https://www.f2iclo.cn/categories/Python/"/>
    
    <category term="WebTesting" scheme="https://www.f2iclo.cn/categories/Python/WebTesting/"/>
    
    
    <category term="python" scheme="https://www.f2iclo.cn/tags/python/"/>
    
    <category term="web test" scheme="https://www.f2iclo.cn/tags/web-test/"/>
    
    <category term="unittest" scheme="https://www.f2iclo.cn/tags/unittest/"/>
    
    <category term="ddt" scheme="https://www.f2iclo.cn/tags/ddt/"/>
    
  </entry>
  
  <entry>
    <title>如何在centOS中配置环境等</title>
    <link href="https://www.f2iclo.cn/2024/08/29/CentOS-jdk/"/>
    <id>https://www.f2iclo.cn/2024/08/29/CentOS-jdk/</id>
    <published>2024-08-29T07:36:40.000Z</published>
    <updated>2024-09-04T12:27:42.702Z</updated>
    
    <content type="html"><![CDATA[<p><i style='color:gray;'>本文章于 2023 年学习时记录，无法保证准确性</i></p><h3 id="centOS-安装以及宿主机的连接"><a href="#centOS-安装以及宿主机的连接" class="headerlink" title="centOS 安装以及宿主机的连接"></a>centOS 安装以及宿主机的连接</h3><h4 id="安装-centOS"><a href="#安装-centOS" class="headerlink" title="安装 centOS"></a>安装 centOS</h4><p>​ 根据 iso 安装需要版本的 centOS，可选带有桌面或者无桌面的内核版本</p><span id="more"></span><hr><h4 id="检查-centOS-版本以及网络状态"><a href="#检查-centOS-版本以及网络状态" class="headerlink" title="检查 centOS 版本以及网络状态"></a>检查 centOS 版本以及网络状态</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/redhat-release # 查询centOS的版本</span><br><span class="line">ip addr #查询ip 默认状态下看不到ip 但是需要记住网卡名称例如ens33</span><br></pre></td></tr></table></figure><p>ip 地址默认看不到，需要我们设置一下网络配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/sysconfig/network-scripts #切换目录</span><br><span class="line">vi ifcfg-ens33 # 修改指定的网卡</span><br></pre></td></tr></table></figure><p>进入到 ifcfg-ens33 之后需要修改<code>BOOTPROTO</code>以及<code>ONBOOT</code>两行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">BOOTPROTO = &quot;dhcp&quot; #更改为静态ip</span><br><span class="line">ONBOOT = &quot;yes&quot; #更改网卡状态开启</span><br><span class="line"># 随后按下esc 输入:wq回车退出</span><br></pre></td></tr></table></figure><p>此时 ip 地址即可查看</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ip addr</span><br><span class="line"># 找到目标网卡inet后的ip地址</span><br></pre></td></tr></table></figure><p><i>此时可以用 ping <a href="http://www.baidu.com来验证网络是否已连接/">www.baidu.com来验证网络是否已连接</a></i></p><hr><h4 id="使用-Xshell-以及-Xftp-进行连接"><a href="#使用-Xshell-以及-Xftp-进行连接" class="headerlink" title="使用 Xshell 以及 Xftp 进行连接"></a>使用 Xshell 以及 Xftp 进行连接</h4><p>在 Xshell 新建会话，用户名使用 centOS 中查到的 ip，用户名为 root 密码为初始创建<br>的密码</p><p>同理 Xftp 也是一样</p><hr><h3 id="JDK-以及-mysql-的环境安装配置"><a href="#JDK-以及-mysql-的环境安装配置" class="headerlink" title="JDK 以及 mysql 的环境安装配置"></a>JDK 以及 mysql 的环境安装配置</h3><h4 id="JDK-的安装"><a href="#JDK-的安装" class="headerlink" title="JDK 的安装"></a>JDK 的安装</h4><h5 id="在-usr-目录下新建一个-jdk-的文件"><a href="#在-usr-目录下新建一个-jdk-的文件" class="headerlink" title="在 usr 目录下新建一个 jdk 的文件"></a>在 usr 目录下新建一个 jdk 的文件</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local # 切换目录到指定位置</span><br><span class="line">mkdir jdk # 创建名为jdk 的文件</span><br></pre></td></tr></table></figure><hr><h5 id="使用-Xftp-进行宿主机与虚拟机间的文件传输"><a href="#使用-Xftp-进行宿主机与虚拟机间的文件传输" class="headerlink" title="使用 Xftp 进行宿主机与虚拟机间的文件传输"></a>使用 Xftp 进行宿主机与虚拟机间的文件传输</h5><p>将 jdk 压缩包传到&#x2F;usr&#x2F;local&#x2F;jdk 中</p><p>使用代码解压</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf &quot;jdk文件名.tar.gz&quot;</span><br></pre></td></tr></table></figure><blockquote><p>不同压缩包的解压方式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tar –xvf file.tar //解压 tar包</span><br><span class="line">tar -xzvf file.tar.gz //解压tar.gz</span><br><span class="line">tar -xjvf file.tar.bz2 //解压 tar.bz2</span><br><span class="line">tar –xZvf file.tar.Z //解压tar.Z</span><br><span class="line">unrar e file.rar //解压rar</span><br><span class="line">unzip file.zip //解压zip</span><br></pre></td></tr></table></figure></blockquote><hr><h5 id="编辑环境变量，以及验证-jdk"><a href="#编辑环境变量，以及验证-jdk" class="headerlink" title="编辑环境变量，以及验证 jdk"></a>编辑环境变量，以及验证 jdk</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/profile # 编辑环境变量</span><br><span class="line"># 在文末加入路径代码</span><br><span class="line"># jdk config</span><br><span class="line">JAVA_HOME=/usr/local/jdk/jdk1.8.0_391</span><br><span class="line">CLASS_PATH=$JAVA_HOME/lib/tools.jar</span><br><span class="line">PATH=$JAVA_HOME/bin:$PATH</span><br><span class="line">export JAVA_HOME CLASS_PATH PATH</span><br></pre></td></tr></table></figure><p>编辑完成按下 esc 键退出编辑模式，再按下**<code>:wq</code>**回车退出保存</p><p>使用<code>source /etc/profile</code>使配置生效</p><p>验证 java</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br><span class="line">jps</span><br></pre></td></tr></table></figure><hr><h4 id="mySQL-的安装"><a href="#mySQL-的安装" class="headerlink" title="mySQL 的安装"></a>mySQL 的安装</h4><h5 id="使用-Xftp-将需要安装的-mysql-传输到虚拟机中"><a href="#使用-Xftp-将需要安装的-mysql-传输到虚拟机中" class="headerlink" title="使用 Xftp 将需要安装的 mysql 传输到虚拟机中"></a>使用 Xftp 将需要安装的 mysql 传输到虚拟机中</h5><hr><h5 id="解压改名以及移动"><a href="#解压改名以及移动" class="headerlink" title="解压改名以及移动"></a>解压改名以及移动</h5><p><i>文件名以mysql-5.7.43.tar.gz示例</i></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf mysql-5.7.43.tar.gz # 解压</span><br><span class="line">mv mysql-5.7.43 mysql # 改名为mysql</span><br><span class="line">mv mysql /usr/local # 移动到常用目录中</span><br></pre></td></tr></table></figure><hr><h5 id="创建一个新的-mysql-用户"><a href="#创建一个新的-mysql-用户" class="headerlink" title="创建一个新的 mysql 用户"></a>创建一个新的 mysql 用户</h5><ol><li><p>删除系统已有的数据库 否则会导致 mysql 安装冲突</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 删除mariadb</span><br><span class="line">rpm -qa|grep mariadb # 列出所有mariadb数据库，有多少下面删多少</span><br><span class="line">rpm -e --nodeps &quot;要删除的数据库&quot;</span><br></pre></td></tr></table></figure></li><li><p>创建一个不需要登录的 mysql 账号，给对应的目录授予权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 创建不需要登录的mysql账号</span><br><span class="line">groupadd mysql</span><br><span class="line">useradd -r -g mysql -s /bin/false mysql</span><br><span class="line"># 给予权限</span><br><span class="line">chown -R mysql:mysql /usr/local/mysql</span><br><span class="line">mkdir -p /data/mysql</span><br><span class="line">chown -R mysql:mysql /data/mysql</span><br></pre></td></tr></table></figure></li></ol><hr><h5 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install libaio # 从云端安装需要的依赖包</span><br></pre></td></tr></table></figure><hr><h5 id="初始化-mysql-以及配置环境变量"><a href="#初始化-mysql-以及配置环境变量" class="headerlink" title="初始化 mysql 以及配置环境变量"></a>初始化 mysql 以及配置环境变量</h5><ol><li><p>对 mysql 进行初始化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/mysql/bin # 切换到mysql的bin目录</span><br><span class="line">./mysqld --user=mysql --initialize # 进行初始化</span><br></pre></td></tr></table></figure><p>初始化后会显示初始的 root 账户密码，在最后一行<code>localhost:</code>后，后续需要使用这<br>个密码进行登录 mysql</p></li><li><p>添加环境变量</p><p>首先进入到环境变量配置文件中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/profile</span><br></pre></td></tr></table></figure><p>在环境变量最后加入 mysql 路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># mysql congfig</span><br><span class="line">MYSQL_HOME=/opt/apps/mysql</span><br><span class="line">PATH=$PATH:&#123;MYSQL_HOME&#125;/bin</span><br><span class="line">export MYSQL_HOME PATH</span><br></pre></td></tr></table></figure></li><li><p>添加到系统服务</p><p>进入 mysql.server 进行编辑</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd support-files</span><br><span class="line">vi mysql.server</span><br></pre></td></tr></table></figure><p>进入到编辑页面后修改<code>basedir</code>、<code>datadir</code>以及<code>mysql_pid_file_path</code>的量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">basedir=/usr/local/mysql</span><br><span class="line">datadir=/data/mysql/data</span><br><span class="line">mysql_pid_file_path=/data/mysql/mysql.pid</span><br></pre></td></tr></table></figure><p>编辑完后按下<code>esc</code>退出编辑模式，再按下<code>:wq</code>保存退出</p></li><li><p>设置开机启动，更改目录权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 给予权限</span><br><span class="line">cp mysql.server /etc.init.d/mysql</span><br><span class="line">chmod 755 /etc/init.d/mysql</span><br><span class="line"># 启动mysql</span><br><span class="line">service mysql start</span><br><span class="line">chkconfig --add mysql</span><br><span class="line">chkconfig --list</span><br></pre></td></tr></table></figure></li></ol><hr><h5 id="修改-root-密码"><a href="#修改-root-密码" class="headerlink" title="修改 root 密码"></a>修改 root 密码</h5><p>使用上面准备好的 root 密码登录到 mysql</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p</span><br><span class="line"># 回车后输入刚刚得到的密码</span><br></pre></td></tr></table></figure><blockquote><p>注意：如果此时显示未找到 mysql 命令时，是因为系统默认查找&#x2F;usr&#x2F;bin 下的命令，如<br>果命令不在此处，需要映射一个链接到&#x2F;usr&#x2F;bin 目录下</p><p>1、找到 mysql 的安装路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whereis mysql</span><br></pre></td></tr></table></figure><p>2、确定安装路径在<code>/usr/local/mysql/bin/mysql</code>下后，创建一个软连接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/local/mysql/bin/mysql /usr/bin</span><br></pre></td></tr></table></figure><p>3、再次进行登录尝试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure></blockquote><p>登录后修改密码为指定密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alter user &#x27;root&#x27;@&#x27;localhost&#x27; identified by &#x27;123456&#x27;; # 修改密码为123456 注意代码末需要带分号</span><br><span class="line">flush privileges; # 刷新权限</span><br></pre></td></tr></table></figure><hr><h4 id="tomcat-的安装与部署"><a href="#tomcat-的安装与部署" class="headerlink" title="tomcat 的安装与部署"></a>tomcat 的安装与部署</h4><h5 id="使用-Xftp-将需要安装的-Tomcat-传输到虚拟机中"><a href="#使用-Xftp-将需要安装的-Tomcat-传输到虚拟机中" class="headerlink" title="使用 Xftp 将需要安装的 Tomcat 传输到虚拟机中"></a>使用 Xftp 将需要安装的 Tomcat 传输到虚拟机中</h5><p>在<code>/usr/local/</code>目录下新建名为<code>tomcat</code>的文件夹</p><p>将需要安装的 Tomcat 通过 Xftp 移动到此处</p><hr><h5 id="解压文件"><a href="#解压文件" class="headerlink" title="解压文件"></a>解压文件</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf apache-tomcat.tar.gz</span><br></pre></td></tr></table></figure><hr><h5 id="启动-tomcat"><a href="#启动-tomcat" class="headerlink" title="启动 tomcat"></a>启动 tomcat</h5><ol><li><p>首先进入到 tomcat 目录下的<code>bin</code>目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/tomcat/apache-tomcat.9.0.83/bin/</span><br></pre></td></tr></table></figure></li><li><p>根据指令启动 tomcat</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./startup.sh</span><br></pre></td></tr></table></figure></li><li><p>进入到日志验证是否正常启动，并查看开放端口号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 进入日志目录</span><br><span class="line">cd ..</span><br><span class="line">cd logs/</span><br><span class="line"># 查看日志最后100行</span><br><span class="line">tail -100f catalina.out</span><br></pre></td></tr></table></figure><p>如果日志内没有报错，查看**开始协议处理句柄[“http-nio-8080”]**中后四位的端口号<br>，这里以 8080 举例。</p><hr></li></ol><h5 id="测试访问-tomcat"><a href="#测试访问-tomcat" class="headerlink" title="测试访问 tomcat"></a>测试访问 tomcat</h5><ol><li><p>去浏览器访问<code>ip:端口号</code>的网址 示例<code>192.168.174.130:8080</code>在地址栏直接访问</p><p>但是这时会无法访问，需要进行防火墙的开放</p></li><li><p>开启防火墙端口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 开启指定端口的防火墙  以8080举例</span><br><span class="line">firewall-cmd --zone=public --add-port=8080/tcp --permanent</span><br><span class="line"></span><br><span class="line">#命令含义： -zone #作用域 -add-port=8080/tcp # 添加端口 格式为：端口/通讯协议  -permanent # 永久生效，没有此参数重启后失效</span><br><span class="line"></span><br><span class="line"># 重启防火墙</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure></li><li><p>访问 tomcat</p><p>此时去浏览器地址页输入<code>192.168.174.130:8080</code>即可访问 tomcat 主页</p><hr></li></ol><h5 id="部署项目到-tomcact"><a href="#部署项目到-tomcact" class="headerlink" title="部署项目到 tomcact"></a>部署项目到 tomcact</h5><ol><li><p>关闭 tomcat</p><p>部署先需要先关闭 tomcat</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 返回到bin目录</span><br><span class="line">cd ..</span><br><span class="line">cd bin/</span><br><span class="line"># 输入关闭指令</span><br><span class="line">./shutdown.sh</span><br></pre></td></tr></table></figure></li><li><p>导入项目</p><p>将事先准备好的项目通过 Xftp 导入到 tomcat 目录下的<code>/webapps/</code>下，下面以<br>examtest 为例。</p></li><li><p>访问项目</p><p>重新开启 tomcat</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">./startup.sh</span><br><span class="line"># 再去日志看看是否正常开启</span><br><span class="line">cd ..</span><br><span class="line">cd logs/</span><br><span class="line">tail -100f catalina.out</span><br></pre></td></tr></table></figure><p>成功开启后进入个人项目页面</p><blockquote><p>浏览器访问 192.168.174.130:8080&#x2F;examtest&#x2F;</p><p> 项目名是什么，端口后就是什么</p></blockquote></li></ol><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;i style=&#39;color:gray;&#39;&gt;本文章于 2023 年学习时记录，无法保证准确性&lt;/i&gt;&lt;/p&gt;
&lt;h3 id=&quot;centOS-安装以及宿主机的连接&quot;&gt;&lt;a href=&quot;#centOS-安装以及宿主机的连接&quot; class=&quot;headerlink&quot; title=&quot;centOS 安装以及宿主机的连接&quot;&gt;&lt;/a&gt;centOS 安装以及宿主机的连接&lt;/h3&gt;&lt;h4 id=&quot;安装-centOS&quot;&gt;&lt;a href=&quot;#安装-centOS&quot; class=&quot;headerlink&quot; title=&quot;安装 centOS&quot;&gt;&lt;/a&gt;安装 centOS&lt;/h4&gt;&lt;p&gt;​ 根据 iso 安装需要版本的 centOS，可选带有桌面或者无桌面的内核版本&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="https://www.f2iclo.cn/categories/Linux/"/>
    
    
    <category term="CentOS" scheme="https://www.f2iclo.cn/tags/CentOS/"/>
    
    <category term="Linux" scheme="https://www.f2iclo.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>第一篇文章</title>
    <link href="https://www.f2iclo.cn/2024/08/19/new/"/>
    <id>https://www.f2iclo.cn/2024/08/19/new/</id>
    <published>2024-08-19T08:14:10.000Z</published>
    <updated>2024-09-04T12:27:42.703Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TEST"><a href="#TEST" class="headerlink" title="TEST"></a>TEST</h2><p>人生不是马拉松，终点不只一个。不管直路弯路，是走是爬，你的路都是独一无二的。不管是穷困或富贵，成功都是你定义的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;TEST&quot;&gt;&lt;a href=&quot;#TEST&quot; class=&quot;headerlink&quot; title=&quot;TEST&quot;&gt;&lt;/a&gt;TEST&lt;/h2&gt;&lt;p&gt;人生不是马拉松，终点不只一个。不管直路弯路，是走是爬，你的路都是独一无二的。不管是穷困或富贵，成功都是你定义的。&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
</feed>
